"""The simulator file."""
from datetime import datetime, timedelta
import threading
import logging

from constants import TIMER_DURATION
from helpers.process_helpers import get_random_activity, get_random_heart_rate, get_random_resp_rate
from processors.sensor_processor import Processor


logger = logging.getLogger("SIMULATOR")


class Sensor_Simulator:
    def __init__(self, user: str, minutes: int) -> None:
        """The main simulator for a health sensor.

        Simulates by processing randomly generated health values to the sensor processor.

        Args:
            user (str): The user name.
            minutes (int): Total time to simulate in minutes.
        """
        self.user: str = user
        self.simulation_started_on: int = int(datetime.timestamp(datetime.now()))
        self.simulation_ending_on: int = int(datetime.timestamp(datetime.now() + timedelta(minutes=minutes)))
        self.current_time: int = int(datetime.timestamp(datetime.now()))
        self.processor = Processor(self.simulation_started_on)

    def start_simulation(self) -> None:
        """Starts the sensor simulation.

        Used a timer that will be call this function after every second.
        And send random health values to the main processor.
        """
        # This function schedules the function to run after every 1 second.
        func_thread = threading.Timer(TIMER_DURATION, self.start_simulation)
        func_thread.start()
        # Simulate by sending data to the processor.
        logger.info({
            "module": "Sensor_Simulator.start_simulation",
            "msg": "SIMULATION_IN_PROGRESS",
            "time": self.current_time
        })
        self.process_payload()
        self.current_time = int(datetime.timestamp(datetime.now()))
        if self.current_time >= self.simulation_ending_on:
            # If simulation has to be ended.
            logger.info({
                "module": "Sensor_Simulator.start_simulation",
                "msg": "SIMULATION_COMPLETE",
                "time": self.current_time
            })
            self.processor.post_processor()
            func_thread.cancel()

    def process_payload(self) -> None:
        """The main function that will generate a mock payload generated by a sensor and send it to main processor.

        Generates random heart rate, respiratory rate and random activity.
        Sends the generated data to processor for processing.
        """
        sensor_payload = {
            "user_id" : self.user,
            "timestamp" : self.current_time,
            "heart_rate" : get_random_heart_rate(),
            "respiration_rate" : get_random_resp_rate(),
            "activity" : get_random_activity(),
        }
        try:
            self.processor.process_sensor_data(sensor_payload)
        except Exception as e:
            logger.info({
                "module": "Sensor_Simulator.process_payload",
                "msg": "EXCEPTION_IN_PROCESSING_DATA",
                "time": self.current_time,
                "error": e
            })
